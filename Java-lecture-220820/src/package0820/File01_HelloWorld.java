package package0820;


// 프로그래밍 관련 용어
//  주석(comments)
//	 - 소스 코드 내에 설명을 작성하기 위한 기능
//	 - 프로그램 실행에 전혀 영향이 없다.
//	 - 종류
//	 	한 줄 주석		: '//' 이후 내용을 주석으로 처리
//						: ctrl + / (설정 & 해제)
//		여러 줄 주석	: '/*'와 '*/' 를 사용하여
//						  이 사이에 내용을 모두 주석
//						: ctrl + shift + / (설정)
//						: ctrl + shift + \ (해제)

/*
 * 여러 줄의
 * 주석을
 * 작성할 수
 * 있다. 
 */

//	키워드(keyword)
//	 - java 언어에서 사용되는 기능이 있거나 의미가 있는 단어
//	식별자(Indentifier)
//   - 데이터, 함수, 클래스 등을 식별하기 위한 단어
//	 - 개발자에 의해 부여되는 이름

//  표현식(Expression)
//	 - 데이터를 표현하는 식 = 문법
//	 - 숫자의 표현식 → 100
// 	 - 문자의 표현식 → 'A'
//	 - 더하기 연산자의 표현식 → 100 + 200

// 	명령어(Command)
//	 - 하나 이상의 표현식으로 구성된 문장
//	 - 프로그램이 수행하는 단위
//	 - 문장의 마침표를 작성하는 것 처럼
//	   명령어의 마지막에는 세미콜론(;)을 작성

//  함수(Function)
//   - 하나 이상의 명령어들로 구성된 블록
//	 - 하나의 기능을 담당
//	 - Java 에서는 함수라는 이름 대신 메서드라고 부른다.
//	 - functionName(...)

//  블록(Block, Scope)
//	 - 다수의 명령어를 감싸는 영역
//	 - 블록 내에는 또 다른 블록이 있을 수 있다.
//	 - 중괄호({, })를 통해서 만들며, 중괄호 내에 작성할 때
//	   한 번의 들여쓰기를 통해 가독성을 높여주는 것이 좋다.

//  클래스(Class)
//	 - 객체를 만들기 위한 하나의 타입
//	 - 다수의 매서드와 필드들을 감싸는 영역
//	 - 그 외 명령어는 절대 작성될수 없다.

//-------------------------------------------------------------------
//  컴파일(complie)
//	 - 소스 코드를 바이트 코드로 번역하는 과정
//	 - 이클립스에서 코드 파일을 저장할 때 컴파일을 수행
//	 - 이때 문법 오류나 타입 오류가 발생하면 컴파일이
//	   되어지지 않는다. → 바이트 코드가 생성되지 않는다.
//	 - 바이트 코드는 프로젝트 내의 bin 폴더에 생성


public class File01_HelloWorld {
	
	// f(x) = x + 10
	static int f(int x) {
		return x + 10;
	}
	
	// main 메서드
	//  - 엔트리 포인트
	//		: JVM 이 맨 처음 실행하는 메서드
	//  - 메서드는 반드시 클래스 내에 작성되어야 한다.
	//  - 명령어는 main 메서드 안에서 작성해야한다.
	//  - 자동완성
	//		main 입력 후 ctrl + space
	public static void main(String[] args) {
		// TODO 자동 생성된 메소드 스텁
		
		// "Hello World!" 출력하기
		System.out.println("Hello World!");
		System.out.println(f(15));
	}
}





